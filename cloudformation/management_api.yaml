AWSTemplateFormatVersion: 2010-09-09
Description: "Pushes logs, metrics and traces from AWS to Datadog."
Transform: AWS::Serverless-2016-10-31

Parameters:
  S3BucketName:
    Type: String
  CertArn:
    Type: String

Resources:
  AccessLogs:
    Type: AWS::Logs::LogGroup

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId
      DefaultRouteSettings:
        ThrottlingBurstLimit: 5
        ThrottlingRateLimit: 1
      RouteSettings:
        "GET /start": {}
        "GET /stop": {}
        "GET /ip/reset": {}
        "GET /ip/add": {}
      StageVariables:
        StageVar: Value
      FailOnWarnings: True
      Domain:
        DomainName: api.foundry.games.roleplaying.world
        CertificateArn: !Ref CertArn

  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: Manage Foundry Env
      Handler: manager.lambda_handler
      MemorySize: 128
      Runtime: python3.7
      Timeout: 120
      CodeUri: ../handler.zip
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
      Events:
        CheckLogGroupsScheduledEvent:
          Type: Schedule
          Properties:
            Description: Event rule to reset permissions every day (3am AEDT)
            Schedule: 'cron(0 16 * * ? *)'
            Enabled: True
        StartServer: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /start
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
        StopServer: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /stop
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
        ResetIP: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /ip/reset
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
        AddIP: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /ip/add
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
      Role: !GetAtt Role.Arn

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: EC2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:StopInstances"
                  - "ec2:StartInstances"
                Resource:
                  - "*"
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "s3:PutBucketPolicy"
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
